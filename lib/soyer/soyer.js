// Generated by CoffeeScript 1.6.3
(function() {
  var EventEmitter, ServerSoy, fs, path, regexLocal, vm, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  vm = require("vm");

  fs = require("fs");

  path = require("path");

  _ = require("underscore");

  EventEmitter = require("events").EventEmitter;

  regexLocal = /[a-zA-Z]{2}-[a-zA-Z]{2}$/i;

  module.exports = ServerSoy = (function(_super) {
    __extends(ServerSoy, _super);

    ServerSoy.prototype.settingDefaults = {
      path: "../templates",
      defaultlang: "en-us",
      availibleLangs: ["en-us", "de-de"],
      languagesupport: false,
      soyUtilsPath: path.join(__dirname, '.', 'soyutils.js'),
      soyFileExt: ".soy.js",
      extractLang: function(file) {
        var _res;
        _res = regexLocal.exec(file);
        if (_res && this.config.languagesupport) {
          return _res[0].toLowerCase();
        } else {
          return "global";
        }
      }
    };

    function ServerSoy(settings) {
      var _this = this;
      if (settings == null) {
        settings = {};
      }
      this._findFiles = __bind(this._findFiles, this);
      this._mixinGlobal = __bind(this._mixinGlobal, this);
      this._getLangGlobal = __bind(this._getLangGlobal, this);
      this._getContext = __bind(this._getContext, this);
      this._loadCompiledTemplateFiles = __bind(this._loadCompiledTemplateFiles, this);
      this._loadCompiledTemplates = __bind(this._loadCompiledTemplates, this);
      this.render = __bind(this.render, this);
      this.get = __bind(this.get, this);
      this.load = __bind(this.load, this);
      this.globals = {};
      this.ready = false;
      this.__defineGetter__("config", function() {
        var _cnf;
        _cnf = _.extend({}, _this.settingDefaults, settings);
        _cnf.path = path.normalize(_cnf.path) + "/";
        if (!_cnf.languagesupport) {
          _cnf.defaultlang = "global";
        }
        return _cnf;
      });
      return;
    }

    ServerSoy.prototype.load = function(cb) {
      var _this = this;
      this._loadCompiledTemplates(function(err, success) {
        if (err) {
          return cb(err);
        } else {
          _this.emit("ready");
          _this.ready = true;
          return cb(null, true);
        }
      });
    };

    ServerSoy.prototype.get = function(_n, lang) {
      var parts, template;
      if (lang == null) {
        lang = this.config.defaultlang;
      }
      if (this.ready) {
        if (!this.config.languagesupport) {
          lang = "global";
        }
        parts = _n.toLowerCase().split('.');
        template = this._getLangGlobal(lang);
        while (parts.length && template) {
          template = template[parts.shift()];
        }
        if (!template) {
          throw new Error('soyer: Unknown template [' + _n + ']');
        }
      } else {
        throw new Error('soyer: module not loaded. Please run `.load()` first.');
      }
      return template;
    };

    ServerSoy.prototype.render = function(_n, lang, data) {
      var fn;
      if (data == null) {
        data = {};
      }
      if (this.ready) {
        if (arguments.length === 1) {
          data = {};
          lang = this.config.defaultlang;
        }
        if (arguments.length === 2) {
          data = lang;
          lang = this.config.defaultlang;
        }
        fn = this.get(_n, lang);
        if (fn) {
          return fn(data);
        } else {
          throw new Error('soyer: Unknown template [' + _n + ']');
        }
      } else {
        throw new Error('soyer: module not loaded. Please run `.load()` first.');
      }
    };

    ServerSoy.prototype.routingWait = function() {
      var args, next, _i;
      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), next = arguments[_i++];
      if (this.ready) {
        next();
      } else {
        this.once("ready", function() {
          return next();
        });
      }
    };

    ServerSoy.prototype._loadCompiledTemplates = function(cb) {
      var _cnf,
        _this = this;
      _cnf = this.config;
      this._findFiles(_cnf.path, _cnf.soyFileExt, function(err, files) {
        if (err) {
          cb(err);
        } else {
          files = files.map(function(file) {
            return path.join(_cnf.path, file);
          });
          _this._loadCompiledTemplateFiles(files, cb);
        }
      });
    };

    ServerSoy.prototype._loadCompiledTemplateFiles = function(files, cb) {
      var next,
        _this = this;
      next = function() {
        var lang, _filename, _lang, _path, _ref, _vm;
        if (files.length === 0) {
          _ref = _this.contexts;
          for (lang in _ref) {
            _vm = _ref[lang];
            _this._mixinGlobal(lang, _vm);
          }
          cb(null, true);
        } else {
          _path = files.pop();
          _filename = path.basename(_path, _this.config.soyFileExt);
          _lang = _this.config.languagesupport ? _this.config.extractLang.call(_this, _filename) : "global";
          fs.readFile(_path, 'utf8', function(err, fileContents) {
            if (err) {
              cb(err);
            } else {
              _vm = _this._getContext(_lang);
              vm.runInContext(fileContents, _vm, _path);
              next();
            }
          });
        }
      };
      next();
    };

    ServerSoy.prototype._getContext = function(lang) {
      var _vm;
      this.contexts || (this.contexts = {});
      if (this.contexts[lang]) {
        return this.contexts[lang];
      } else {
        _vm = vm.createContext({});
        vm.runInNewContext(fs.readFileSync(this.config.soyUtilsPath, 'utf8'), _vm, this.config.soyUtilsPath);
        this.contexts[lang] = _vm;
        return _vm;
      }
    };

    ServerSoy.prototype._getLangGlobal = function(lang) {
      var _lang;
      if (__indexOf.call(this.config.availibleLangs, lang) >= 0 && this.globals[lang]) {
        return this.globals[lang];
      } else if (this.globals[this.config.defaultlang]) {
        return this.globals[this.config.defaultlang];
      } else {
        _lang = _.first(_.keys(this.globals));
        if (_lang) {
          return this.globals[_lang];
        } else {
          return null;
        }
      }
    };

    ServerSoy.prototype._mixinGlobal = function(lang, cntx) {
      var _base, _n, _v;
      (_base = this.globals)[lang] || (_base[lang] = {});
      for (_n in cntx) {
        _v = cntx[_n];
        this.globals[lang][_n] = _v;
      }
    };

    ServerSoy.prototype._findFiles = function(directory, extension, cb) {
      var files, next, stack, _cnf, _ext,
        _this = this;
      _cnf = this.config;
      files = [];
      stack = [directory];
      _ext = this.config.soyFileExt;
      next = function() {
        var dir;
        if (!stack.length) {
          return cb(null, files);
        } else {
          dir = stack.pop();
          return fs.stat(dir, function(err, stats) {
            if (err) {
              cb(err);
            } else {
              if (!stats.isDirectory) {
                return next();
              }
              fs.readdir(dir, function(err, dirContents) {
                var file, fullpath, _i, _len;
                if (err) {
                  cb(err);
                } else {
                  for (_i = 0, _len = dirContents.length; _i < _len; _i++) {
                    file = dirContents[_i];
                    fullpath = path.join(dir, file);
                    if (file[0] !== "." && file.indexOf(_ext) >= 0) {
                      files.push(path.relative(directory, fullpath));
                    } else if (file[0] !== "." && file.indexOf(".") === -1) {
                      stack.push(fullpath);
                    }
                  }
                  next();
                }
              });
            }
          });
        }
      };
      next();
    };

    return ServerSoy;

  })(EventEmitter);

}).call(this);
