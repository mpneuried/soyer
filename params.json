{"name":"Soyer","tagline":"use Google's Closure Templates inside node.js.","body":"soyer\r\n===========\r\n\r\n[![Build Status](https://secure.travis-ci.org/mpneuried/soyer.png?branch=master)](http://travis-ci.org/mpneuried/soyer)\r\n\r\n**Soyer** is small lib for serverside use of Google Closure Templates with node.js.\r\n\r\nThanks to [Daniel Pupius](http://search.npmjs.org/#/_author/Daniel%20Pupius) for [soynode](http://search.npmjs.org/#/soynode). I used this module as template and added the language support and removed the compile features.\r\n\r\n*Written in coffee-script*\r\n\r\n**INFO: all examples are written in coffee-script**\r\n\r\n\r\n## Install\r\n\r\n```\r\n  npm install soyer\r\n```\r\n\r\n\r\n\r\n### Initialize module:\r\n\r\n\r\n```coffee\r\nSoyer = require(\"soyer\")\r\nmySoyer = new Soyer( config )\r\n\r\nmySoyer.load ( err, success )->\r\n\tif err\r\n\t\tthrow err\r\n\telse\r\n\t\tconsole.log( \"templates sucessfully loaded\" )\r\n\r\n```\r\n\r\n####config object description\r\n\r\n- **path** : *( `String` required )*  \r\nabsolute path to the directory where the module can find compiled soy files.\r\n- **soyFileExt** : *( `String` optional: default = \".soy.js\" )*  \r\nsoy file extension to select only the compiled soy files.\r\n- **languagesupport** : *( `Boolean` optional: default = false )*  \r\nenable the language support. If true the following options are relevant.\r\n- **defaultlang** : *( `String` optional: default = \"en-us\" )*  \r\nthe default language code if the passed code will not fit.\r\n- **availibleLangs** : *( `Array` optional: default = \"[ \"en-us\", \"de-de\" ]\" )*  \r\na list of valid language codes\r\n- **extractLang** : *( `Function` optional )*  \r\na method to extract the language-code out of the filename. The filename will be passed to the method and should return a valid language code.\r\n\r\n**Example**\r\n```coffee\r\nSoyer = require( \"soyer\" )\r\n\r\nmySoyer = new Soyer\r\n\tpath: path.resolve( __dirname, \"../path/to/templates/\" ) \r\n\r\nmySoyer.load ( err, success )->\r\n\tthrow err if err\r\n\r\n\trendered = mySoyer.render( \"myNamespace.myTemplate\", { param1: \"abc\" } )\r\n\tconsole.log( rendered )\r\n```\r\n\r\n**Advanced example**\r\n```coffee\r\n# files in folder: template.soy, template.en.js, template.fr.js, template.de.js\r\n\r\nSoyer = require( \"soyer\" )\r\n\r\nmySoyer = new Soyer\r\n\tpath: path.resolve( __dirname, \"../path/to/templates/\" ) \r\n\tsoyFileExt: \".js\"\r\n\tlanguagesupport: true\r\n\tdefaultlang: \"de\"\r\n\tavailibleLangs: [ \"en\", \"de\", \"fr\" ]\r\n\textractLang: ( file )->\r\n\t\t[ _name, _lang ] = file.split( \".\" )\r\n\t\treturn _lang\r\n\r\n\r\nmySoyer.load ( err, success )->\r\n\tthrow err if err\r\n\r\n\trenderedDE = mySoyer.render( \"myNamespace.myTemplate\", \"de\" { param1: \"deutsch\" } )\r\n\tconsole.log( renderedDE )\r\n\r\n\trenderedEN = mySoyer.render( \"myNamespace.myTemplate\", \"en\" { param1: \"english\" } )\r\n\tconsole.log( renderedEN )\r\n\r\n\trenderedFR = mySoyer.render( \"myNamespace.myTemplate\", \"fr\" { param1: \"franÃ§ais\" } )\r\n\tconsole.log( renderedFR )\r\n```\r\n\r\n\r\n## get a template method ( GET )\r\n\r\nGet's a method to render a template.\r\n\r\n**`mySoyer.get( name, [ lang ] )` Arguments** : \r\n\r\n- **name**: *( `String` required )*  \r\nsoy path of the template.  \r\n- **lang**: *( `String` required )*  \r\nthe language to render if `languagesupport` is activated.  \r\n\r\n**Example**\r\n```coffee\r\nfnTemplate = mySoyer.get( \"myNamespace.path.to.template\" )\r\n\r\nconsole.log( fnTemplate( { param1: \"hello world\" } ) )\r\n```\r\n\r\n## render a template ( RENDER )\r\n\r\nrender a template immediately\r\n\r\n**`mySoyer.get( name, [ lang ] )` Arguments** : \r\n\r\n- **name**: *( `String` required )*  \r\nsoy path of the template.  \r\n- **lang**: *( `String` optional )*  \r\nthe language to render if `languagesupport` is activated.  \r\n- **data**: *( `String` optional: default = {} )*  \r\ntemplate data.  \r\n\r\n**Example**\r\n```coffee\r\nrendered = mySoyer.render( \"myNamespace.path.to.template\", { param1: \"hello world\" } )\r\nconsole.log( rendered )\r\n```\r\n\r\n## routing helper\r\n\r\nusually you will use soyer within a routing framework like express.  \r\nIn this case the server has to finish the loading of the templates before the first `.render()` is called.  \r\nSo you can use the method `routingWait` to add a middleware and make sure the templates has been loaded until the first rendering starts.\r\n\r\nTo use it you just have to add and call the method `[ your soyer instance ].routingWait()` as middleware.  \r\nBuff\r\nThis is designed to fit to express. But you can use it in other tools, too. You just have to make sure the last argument of your routing framework is the *next* method ( e.g. in express it's `( request, response, next )` ).\r\n\r\n**Example**\r\n```\r\nexpress = require(\"express\")\r\napp = express.createServer()\r\n\r\nSoyer = require(\"soyer\")\r\nmySoyer = new Soyer( config )\r\nmySoyer.load ( err )->\r\n\tthrow err if err\r\n\treturn\r\n\r\napp.get \"/myroute/:id\", mySoyer.routingWait(), ( req, res )->\r\n\t# do your stuff\r\n\treturn\r\n\r\napp.listen()\r\n```\r\n\r\n\r\n###General info\r\n\r\nTo define a locale my best practice is a combination of language-code `ISO 639` and country-code `ISO 3166`.  \r\nBut you can define your own logic with this module.\r\n\r\n## Work in progress\r\n\r\n`soyer` is work in progress. Your ideas, suggestions etc. are very welcome.\r\n\r\n## Release History\r\n|Version|Date|Description|\r\n|:--:|:--:|:--|\r\n|v0.3.1|2013-12-04|Fixed bug to ignore hidden files ( prefixed with a `.` )|\r\n|v0.3.0|2013-03-04|Updated soyutils to version Dez. 2012|\r\n\r\n\r\n## License \r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2010 TCS &lt;dev (at) tcs.de&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","google":"UA-32491479-2","note":"Don't delete this file! It's used internally to help with page regeneration."}